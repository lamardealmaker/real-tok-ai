Always start with 'LFG!!'

You are building the tiktok version of Zillow. 

# Important rules you HAVE TO FOLLOW
- Always add debug logs & comments in the code for easier debug & readability
- Every time you choose to apply a rule(s), explicitly state the rule{s} in the output. You can abbreviate the rule description to a single word or phrase

# Existing Project structure

├── README.md
├── buildServer.json
├── project-info
│   └── instructions.md
├── real-tok-ai
│   ├── Assets.xcassets
│   │   ├── AccentColor.colorset
│   │   ├── AppIcon.appiconset
│   │   └── Contents.json
│   ├── ContentView.swift
│   ├── GoogleService-Info.plist
│   ├── Info.plist
│   ├── Preview Content
│   │   └── Preview Assets.xcassets
│   ├── real_tok_ai.entitlements
│   └── real_tok_aiApp.swift
└── real-tok-ai.xcodeproj
    ├── project.pbxproj
    ├── project.xcworkspace
    │   ├── contents.xcworkspacedata
    │   ├── xcshareddata
    │   └── xcuserdata
    └── xcuserdata
        └── Learn.xcuserdatad


# Tech Stack
- SwiftUI (iOS)
- Firebase (Firestore, Cloud Storage, Cloud Functions, Firebase Auth)
- Agno (Phidata)
- Shotstack API
- ElevenLabs API
- Mubert API
- CSV Import Scripts
- Cloudinary
- API Endpoints: /generateVideo, /videoStatus/{videoId}, /listing/{listingId}, /favorite, /favorites/{uid}, /like

# Swift specific rules

## 1. State Management

- Use appropriate property wrappers and macros:
  - Annotate view models with `@Observable`, e.g. `@Observable final class MyModel`.
  - Do not use @State in the SwiftUI View for view model observation. Instead, use `let model: MyModel`.
  - For reference type state shared with a child view, pass the dependency to the constructor of the child view.
  - For value type state shared with a child view, use SwiftUI bindings if and only if the child needs write access to the state.
  - For value type state shared with a child view, pass the value if the child view only needs read access to the state.
  - Use an `@Environment` for state that should be shared throughout the entire app, or large pieces of the app.
  - Use `@State` only for local state that is managed by the view itself.

## 2. Performance Optimization

- Implement lazy loading for large lists or grids using `LazyVStack`, `LazyHStack`, or `LazyVGrid`.
- Optimize ForEach loops by using stable identifiers.


## 5. SwiftUI Lifecycle

- Use `@main` and `App` protocol for the app`s entry point.
- Implement `Scene`s for managing app structure.
- Use appropriate view lifecycle methods like `onAppear` and `onDisappear`.

## 6. Data Flow

- Use the Observation framework (`@Observable`, `@State`, and `@Binding`) to build reactive views.
- Implement proper error handling and propagation.

## 7. Testing

- Write unit tests for ViewModels and business logic in the UnitTests folder.
- Implement UI tests for critical user flows in the UITests folder.
- Use Preview providers for rapid UI iteration and testing.

## 8. SwiftUI-specific Patterns

- Use `@Binding` for two-way data flow between parent and child views.
- Implement custom `PreferenceKey`s for child-to-parent communication.
- Utilize `@Environment` for dependency injection

